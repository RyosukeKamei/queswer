今回のプロジェクトで行ったこと
アジャイルプラクティス編

開発規約の原則を作成

開発規約原則
システム品質を保ち、いつまでも携わる人が心身健康でいられるために

1. 開発規約は開発者を幸せにするためのもの
2. プログラミングの大半は書くよりも読む時間が長い
3. 優れたコードは他のメンバーや6カ月ごの自分自身でも理解しやすくなければならない
4. 理解しやすいコードは変更しやすく、バグを見つけられるコードのこと
5. 人間はミスをするので、テストはなるべくミスをしないプログラムに任せる
6. ドキュメントは必要なものだけを長く使う（必要最小限）

1. 開発規約
1-1. 命名規則
1-1-1. データベース命名規則
現行テーブルを解析し、命名辞典を作成
テーブル名・カラム名追加手順
1. 設計時に名称が発生したら、「名称辞典」を調べて既出かどうかを確認する
2. 既出であれば、該当する名称を利用する
3. 新規であれば、適切で明確な名称をつける
4. 設計レビューにて、関係者に共有、必要に応じて改称する
5. 名称辞典に追加する

1-1-2. プログラム命名規則
リーダブルコードより
明確な命名
テーブル、カラム、クラス、メソッド、変数、定数名は適切で明確な名前を付ける
優れた名前はコメントいらず
●例：ダウンロードページ
getPage()よりもdownloadPage()
●例：sizeって何のサイズ？
高さなら→height
ノードなら→NumNodes
メモリなら→MemoryBytes

汎用的・抽象的な名前を避ける
●例：tmpだとわからない
変数スコープが短い場合なら使ってもよいが…
server_can_start()
→TCP/IPポートをサーバがリスンできるか確認するメソッド
→can_listen_on_port()

接尾辞や接頭辞を使って情報を追加する
●接辞の例（名称辞典に追加）
min, max
ms（ミリ秒）, mb（メガバイト）
unsafe 危険, safe 安全
plaintext 暗号化していない
unescaped エスケープしていない
utf8 明示的にUTF8にした
urlenc URLエンコードした

名前は短いに越したことがないが、長くてもコピペやEclipseのコード補完機能を利用して楽にする
●Eclipseのコード補完
Ctrl＋Space

省略は一般的なものだけ
●許容される変数名
evaluation → eval
document → doc
string → str

不要な単語は削除
●例：冗長な名称。文字列を分割
convert_to_string → to_string

名前のフォーマットで情報伝える
●例
jQueryのオブジェクト → $はじまり
HTMLのid → アンダースコア区切り
HTMLのclass → ハイフン区切り

誤解されない名前を付ける
●filter(year <= 2011) // DBのWHERE
year <= のオブジェクト？ → select() // 選択
year <= ではないオブジェクト？ → exclude() // 除外
●clip() // 段落の内容を切り抜く
remove() // 最後からlength文字を削除する
truncate() // 最大length文字まで切り詰める
●CART_TOO_BIG_LIMIT = 10 // ショッピングカートには10点までしか入らない
MAX_ITEMS_IN_CART = 10 // 未満
●範囲指定
first, last // firstもlastも含む
●包含／排他的範囲
begin, end // beginは含みendは含まない
●ブール値の名前
$need_password // パスワードをこれから読み取る
$user_is_authenticated // パスワードを既に読み取っている

変数
ループイテレータ
ループイテレータ(i, j, k)が複数ある場合は名前を付ける
club_i, member_i, users_i

1-2. コーディング規約
1. 標準
PSR-2に従う
ツールを利用し整形
・CodeSniffer2
・php-cs-fixer
慣れるまでは手動で運用し、慣れたらCIツールで自動適用

2. 1関数1機能
1つの関数には1つの機能のみしか実装せず疎結合とする
事例のキャプチャを貼る（Laravel前提）
・テスト精度が向上
　→品質向上
・プログラムがきれいになる
　→可読性向上
　→保守性向上
・誰が書いても同じようなプログラム
　→属人化の排除
　
3. テストファースト
失敗するテストコードを書いてから、本体のプログラムを書き始める
事例のキャプチャを貼る（Laravel前提）
・仕様が明確になる
　→品質向上
・自動的に1関数1機能が実現する
　→品質向上、保守性向上
・実は開発スピードが上がる
　→開発効率化
・安心してリファクタリングが書ける
　→心身の衛生向上

4. 美しいプログラム
縦はそろえる
横は原則80文字

5. わかりやすいコメント
仮の値をコメントに記載
事例のキャプチャを貼る（Laravel前提）
・プログラムがきれいになる
　→可読性向上
　→保守性向上

1-3. データベース設計アンチパターン
SQLアンチパターンの受け売りなので割愛

1-4. データベース設計アンチパターンチェックリスト
未実施

1-5. ドキュメント管理
図化

2-1. データベース構造管理
Laravelのマイグレーションに従う
実際の運用の仕方

2-2. 開発環境管理
→開発環境構築手順書Ver1.0
Laravel環境一発構築（Docker）
- Apache版
- Alpine軽量ビルドインサーバー版

2-3. PHP、フレームワークのバージョン管理
未実施

2-4. 進捗管理
サンプル

ストーリーリスト
No.
タイトル
種別
誰の・何を・なぜ
優先順位
リリース日
備考

子ストーリー＝機能一覧
No
親ストーリー
親ストーリーサブ
子ストーリー（機能）1機能：1メソッドが理想だが、複数メソッドにわかれる可能性もある？
流用
実装方法メモ
予定工数
実績工数
